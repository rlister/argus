#!/usr/bin/env ruby
## run a single argus build directly

require 'argus'
require 'optparse'

USAGE = 'argus-build org/repo:branch'

## msg to send to argus runner
msg = {
  build_options: {}
}

OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on('-s', '--sha SHA', 'Git SHA to build') do |s|
    msg[:sha] = s
  end

  opts.on('-d', '--dockerfile FILENAME', 'Name of Dockerfile') do |d|
    msg[:build_options][:dockerfile] = d
  end

  opts.on('-n', '--no-cache', 'Invalidate docker build cache') do |n|
    msg[:build_options][:nocache] = true
  end

  opts.on('-q', '--sqs QUEUE', 'SQS queue to send msg after push') do |q|
    msg[:sqs] = q
  end
end.parse!

abort("Usage: #{USAGE}") if ARGV.empty?

## parse github repo
msg[:org], msg[:repo], msg[:branch] = ARGV[0].split(/[\/:]+/, 3)
msg.reject! { |_,v| v.nil? }

## prevent timeout on docker api operations (e.g. long bundle install during build)
Excon.defaults[:write_timeout] = ENV.fetch('DOCKER_WRITE_TIMEOUT', 10000)
Excon.defaults[:read_timeout]  = ENV.fetch('DOCKER_READ_TIMEOUT',  10000)

Argus::Runner.new(msg)